graphhopper:
  # Đường dẫn tới file dữ liệu OSM
  datareader.file: /app/osm-data/berlin-latest.osm.pbf
    # file: /app/osm-data/berlin-latest.osm.pbf
    
  # Thư mục lưu trữ graph đã xử lý
  graph:
    location: ./graph-cache

  # Cấu hình profile cho ô tô với mục tiêu nhanh nhất
  profiles:
    - name: car
      custom_model: {
        "priority": [
          { "if": "!car_access", "multiply_by": "0" }
        ],
        "speed": [
          { "if": "true", "limit_to": "car_average_speed" }
        ],
        "distance_influence": 200
      }
  
  # Cấu hình CH (Contraction Hierarchies) để tối ưu tốc độ tính toán
  profiles_ch:
    - profile: car

  profiles_lm: []


  #### Encoded Values ####

  # Add additional information to every edge. Used for path details (#1548) and custom models (docs/core/custom-models.md)
  # Default values are: road_class,road_class_link,road_environment,max_speed,road_access
  # More are: surface,smoothness,max_width,max_height,max_weight,max_weight_except,hgv,max_axle_load,max_length,
  #           hazmat,hazmat_tunnel,hazmat_water,lanes,osm_way_id,toll,track_type,mtb_rating,hike_rating,horse_rating,
  #           country,curvature,average_slope,max_slope,car_temporal_access,bike_temporal_access,foot_temporal_access
  graph.encoded_values: car_access, car_average_speed

  #### Speed, hybrid and flexible mode ####

  # To make CH preparation faster for multiple profiles you can increase the default threads if you have enough RAM.
  # Change this setting only if you know what you are doing and if the default worked for you.
  # prepare.ch.threads: 1

  # To tune the performance vs. memory usage for the hybrid mode use
  # prepare.lm.landmarks: 16

  # Make landmark preparation parallel if you have enough RAM. Change this only if you know what you are doing and if
  # the default worked for you.
  # prepare.lm.threads: 1


  #### Elevation ####

  # To populate your graph with elevation data use SRTM, default is noop (no elevation). Read more about it in docs/core/elevation.md
  # graph.elevation.provider: srtm

  # default location for cache is /tmp/srtm
  # graph.elevation.cache_dir: ./srtmprovider/

  # If you have a slow disk or plenty of RAM change the default MMAP to:
  # graph.elevation.dataaccess: RAM_STORE

  # To enable bilinear interpolation when sampling elevation at points (default uses nearest neighbor):
  # graph.elevation.interpolate: bilinear

  # Reduce ascend/descend per edge without changing the maximum slope:
  # graph.elevation.edge_smoothing: ramer
  # removes elevation fluctuations up to max_elevation (in meter) and replaces the elevation with a value based on the average slope
  # graph.elevation.edge_smoothing.ramer.max_elevation: 5
  # Using an averaging approach for smoothing will reveal values not affected by outliers and realistic slopes and total altitude values (up and down)
  # graph.elevation.edge_smoothing: moving_average
  # window size in meter along a way used for averaging a node's elevation
  # graph.elevation.edge_smoothing.moving_average.window_size: 150


  # To increase elevation profile resolution, use the following two parameters to tune the extra resolution you need
  # against the additional storage space used for edge geometries. You should enable bilinear interpolation when using
  # these features (see #1953 for details).
  # - first, set the distance (in meters) at which elevation samples should be taken on long edges
  # graph.elevation.long_edge_sampling_distance: 60
  # - second, set the elevation tolerance (in meters) to use when simplifying polylines since the default ignores
  #   elevation and will remove the extra points that long edge sampling added
  # graph.elevation.way_point_max_distance: 10


  #### Country-dependent defaults for max speeds ####

  # This features sets a maximum speed in 'max_speed' encoded value if no maxspeed tag was found. It is country-dependent
  # and based on several rules. See https://github.com/westnordost/osm-legal-default-speeds
  # To use it uncomment the following, then enable urban density below and add 'country' to graph.encoded_values
  # max_speed_calculator.enabled: true


  #### Urban density (built-up areas) ####

  # This feature allows classifying roads into 'rural', 'residential' and 'city' areas (encoded value 'urban_density')
  # Use 1 or more threads to enable the feature
  # graph.urban_density.threads: 8
  # Use higher/lower sensitivities if too little/many roads fall into the according categories.
  # Using smaller radii will speed up the classification, but only change these values if you know what you are doing.
  # If you do not need the (rather slow) city classification set city_radius to zero.
  # graph.urban_density.residential_radius: 400
  # graph.urban_density.residential_sensitivity: 6000
  # graph.urban_density.city_radius: 1500
  # graph.urban_density.city_sensitivity: 1000


  #### Subnetworks ####

  # In many cases the road network consists of independent components without any routes going in between. In
  # the most simple case you can imagine an island without a bridge or ferry connection. The following parameter
  # allows setting a minimum size (number of edges) for such detached components. This can be used to reduce the number
  # of cases where a connection between locations might not be found.
  prepare.min_network_size: 200
  prepare.subnetworks.threads: 1

  #### Routing ####

  # You can define the maximum visited nodes when routing. This may result in not found connections if there is no
  # connection between two points within the given visited nodes. The default is Integer.MAX_VALUE. Useful for flexibility mode
  # routing.max_visited_nodes: 1000000

  # default for snap_preventions
  routing.snap_preventions_default: tunnel, bridge, ferry

  # The maximum time in milliseconds after which a routing request will be aborted. This has some routing algorithm
  # specific caveats, but generally it should allow the prevention of long-running requests. The default is Long.MAX_VALUE
  # routing.timeout_ms: 300000

  # Control how many active landmarks are picked per default, this can improve query performance
  # routing.lm.active_landmarks: 4

  # You can limit the max distance between two consecutive waypoints of flexible routing requests to be less or equal
  # the given distance in meter. Default is set to 1000km.
  routing.non_ch.max_waypoint_distance: 1000000


  #### Storage ####

  # Excludes certain types of highways during the OSM import to speed up the process and reduce the size of the graph.
  # A typical application is excluding 'footway','cycleway','path' and maybe 'pedestrian' and 'track' highways for
  # motorized vehicles. This leads to a smaller and less dense graph, because there are fewer ways (obviously),
  # but also because there are fewer crossings between highways (=junctions).
  # Another typical example is excluding 'motorway', 'trunk' and maybe 'primary' highways for bicycle or pedestrian routing.
  import.osm.ignored_highways: footway,cycleway,path,pedestrian,steps # typically useful for motorized-only routing
  # import.osm.ignored_highways: motorway,trunk # typically useful for non-motorized routing

  # configure the memory access, use RAM_STORE for well equipped servers (default and recommended)
  graph.dataaccess.default_type: RAM_STORE

  # will write way names in the preferred language (language code as defined in ISO 639-1 or ISO 639-2):
  # datareader.preferred_language: en

  #### Custom Areas ####

  # GraphHopper reads GeoJSON polygon files including their properties from this directory and makes them available
  # to all tag parsers and custom models. All GeoJSON Features require to have the "id" property.
  # Country borders are included automatically (see countries.geojson).
  # custom_areas.directory: path/to/custom_areas


  #### Country Rules ####

  # GraphHopper applies country-specific routing rules during import (not enabled by default).
  # You need to redo the import for changes to take effect.
  # country_rules.enabled: true
  
# Cấu hình server
server:
  application_connectors:
    - type: http
      port: 8989
      bind_host: 0.0.0.0
  admin_connectors:
    - type: http
      port: 8990
      bind_host: 0.0.0.0